/***********************************************************
Q1
1/1 point (graded)
Find the names of all students who are friends with someone named Gabriel.
***********************************************************/
select H2.name
from Highschooler H1, Highschooler H2, Friend
where H1.ID=Friend.ID1 and H2.ID=Friend.ID2
  	 and H1.name = "Gabriel"

/***********************************************************
Q2
1/1 point (graded)
For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like.
***********************************************************/
select H1.name, H1.grade, H2.name, H2.grade
from Highschooler H1, Highschooler H2, Likes
where H1.ID=Likes.ID1 and H2.ID=Likes.ID2
     and (H1.grade-H2.grade) >= 2

/***********************************************************
Q3
1/1 point (graded)
For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order.
***********************************************************/
select  A.a, aGrade, A.b, bGrade
from (select H1.name as a, H1.grade as aGrade, H2.name as b, H2.grade as bGrade
	  from Highschooler H1, Highschooler H2, Likes
	  where H1.ID=Likes.ID1 and H2.ID=Likes.ID2
          and H1.name<H2.name) A,
	(select H1.name as a, H2.name as b
         from Highschooler H1, Highschooler H2, Likes
         where H1.ID=Likes.ID1 and H2.ID=Likes.ID2
          and H2.name<H1.name) B
where A.a=B.b and A.b=B.a

/***********************************************************
Q4
1/1 point (graded)
Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade.
***********************************************************/
select name, grade
from Highschooler
where ID not in (select ID1
		from likes
		union
		select ID2
		from likes)
order by grade, name

/***********************************************************
Q5
1/1 point (graded)
For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.
***********************************************************/
select H1.name, H1.grade, H2.name, H2.grade 
from Highschooler H1, Highschooler H2, Likes
where H1.ID=Likes.ID1 and H2.ID=Likes.ID2
    and ID2 not in 	(select ID1
			from likes)

/***********************************************************
Q6
1/1 point (graded)
Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade.
***********************************************************/
select h1name,h1grade
from 	(select H1.name as h1name, H1.grade as h1grade, H2.name as h2name, H2.grade as h2grade
	from Highschooler H1, Friend, Highschooler H2
	where H1.ID=Friend.ID1 and H2.ID=Friend.ID2 
	group by H1.ID
	having count(distinct H2.grade)=1) A
where  h1grade=h2grade
order by h1grade, h1name

/***********************************************************
Q7
1/1 point (graded)
For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C.
***********************************************************/
select H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
from 	Highschooler H1, Highschooler H2, Highschooler H3,
		(select T1.likeID1 as like1, T1.likeID2 as like2, T1.friendID2 as friend
		from 	
		 		(select likeID1, likeID2, Friend.ID2 as friendID2
				from	(select Likes.ID1 as likeID1,Likes.ID2 as likeID2
						from Likes, Friend
						where Friend.ID1=Likes.ID1 and Friend.ID2<>Likes.ID2
						except
						select Likes.ID1 as likeID1, Likes.ID2 as likeID2
						from Likes, Friend
						where Friend.ID1=Likes.ID1 and Friend.ID2=Likes.ID2) Likes,
						Friend
				where Likes.likeID1=Friend.ID1) T1,

				(select likeID1, likeID2, Friend.ID1 as friendID1
				from	(select Likes.ID1 as likeID1,Likes.ID2 as likeID2
						from Likes, Friend
						where Friend.ID1=Likes.ID1 and Friend.ID2<>Likes.ID2
						except
						select Likes.ID1 as likeID1, Likes.ID2 as likeID2
						from Likes, Friend
						where Friend.ID1=Likes.ID1 and Friend.ID2=Likes.ID2) Likes,
						Friend
				where Likes.likeID2=Friend.ID2) T2
		where T1.likeID1=T2.likeID1 and T1.likeID2=T2.likeID2 and T1.friendID2=T2.friendID1) T
where T.like1=H1.ID and T.like2=H2.ID and T.friend=H3.ID

/***********************************************************
Q8
1/1 point (graded)
Find the difference between the number of students in the school and the number of different first names.
***********************************************************/
select total-totalFirstName
from 	(select count(*) as total
	from Highschooler),
	(select count(distinct name) as totalFirstName
	from Highschooler)

/***********************************************************
Q9
1/1 point (graded)
Find the name and grade of all students who are liked by more than one other student.
***********************************************************/
select name, grade
from Highschooler
where ID in 	(select ID2
		from Likes
		group by ID2
		having count(*)>1)

